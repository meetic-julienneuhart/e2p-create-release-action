{"version":3,"file":"683.index.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":[".././node_modules/find-up-simple/index.js",".././node_modules/read-package-up/index.js"],"sourcesContent":["import process from 'node:process';\nimport fsPromises from 'node:fs/promises';\nimport {fileURLToPath} from 'node:url';\nimport fs from 'node:fs';\nimport path from 'node:path';\n\nconst toPath = urlOrPath => urlOrPath instanceof URL ? fileURLToPath(urlOrPath) : urlOrPath;\n\nexport async function findUp(name, {\n\tcwd = process.cwd(),\n\ttype = 'file',\n\tstopAt,\n} = {}) {\n\tlet directory = path.resolve(toPath(cwd) ?? '');\n\tconst {root} = path.parse(directory);\n\tstopAt = path.resolve(directory, toPath(stopAt ?? root));\n\n\twhile (directory && directory !== stopAt && directory !== root) {\n\t\tconst filePath = path.isAbsolute(name) ? name : path.join(directory, name);\n\n\t\ttry {\n\t\t\tconst stats = await fsPromises.stat(filePath); // eslint-disable-line no-await-in-loop\n\t\t\tif ((type === 'file' && stats.isFile()) || (type === 'directory' && stats.isDirectory())) {\n\t\t\t\treturn filePath;\n\t\t\t}\n\t\t} catch {}\n\n\t\tdirectory = path.dirname(directory);\n\t}\n}\n\nexport function findUpSync(name, {\n\tcwd = process.cwd(),\n\ttype = 'file',\n\tstopAt,\n} = {}) {\n\tlet directory = path.resolve(toPath(cwd) ?? '');\n\tconst {root} = path.parse(directory);\n\tstopAt = path.resolve(directory, toPath(stopAt) ?? root);\n\n\twhile (directory && directory !== stopAt && directory !== root) {\n\t\tconst filePath = path.isAbsolute(name) ? name : path.join(directory, name);\n\n\t\ttry {\n\t\t\tconst stats = fs.statSync(filePath, {throwIfNoEntry: false});\n\t\t\tif ((type === 'file' && stats?.isFile()) || (type === 'directory' && stats?.isDirectory())) {\n\t\t\t\treturn filePath;\n\t\t\t}\n\t\t} catch {}\n\n\t\tdirectory = path.dirname(directory);\n\t}\n}\n","import path from 'node:path';\nimport {findUp, findUpSync} from 'find-up-simple';\nimport {readPackage, readPackageSync} from 'read-pkg';\n\nexport async function readPackageUp(options) {\n\tconst filePath = await findUp('package.json', options);\n\tif (!filePath) {\n\t\treturn;\n\t}\n\n\treturn {\n\t\tpackageJson: await readPackage({...options, cwd: path.dirname(filePath)}),\n\t\tpath: filePath,\n\t};\n}\n\nexport function readPackageUpSync(options) {\n\tconst filePath = findUpSync('package.json', options);\n\tif (!filePath) {\n\t\treturn;\n\t}\n\n\treturn {\n\t\tpackageJson: readPackageSync({...options, cwd: path.dirname(filePath)}),\n\t\tpath: filePath,\n\t};\n}\n"],"names":[],"sourceRoot":""}